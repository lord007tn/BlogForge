name: Release CI

on:
  push:
    branches:
      - master
  release:
    types: [published]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x' # Specify your project's Node.js version
          cache: 'npm' # Cache npm dependencies

      - name: Install dependencies
        run: npm ci # Clean install of dependencies

      - name: Build project
        # This step runs your build script if it exists in package.json
        run: |
          if [ -n "$(node -p "require('./package.json').scripts.build")" ]; then
            npm run build
          else
            echo "No build script found in package.json, skipping build step."
          fi

  draft_release_notes:
    name: Draft Release Notes
    # This job runs only on pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create/update GitHub release drafts
      pull-requests: write # Required if release-drafter interacts with PRs (e.g., labeling)
    steps:
      - name: Checkout code (full depth)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for release-drafter to analyze commits

      - name: Draft next release notes
        uses: release-drafter/release-drafter@v6
        with:
          publish: false # Set to false to only create/update a draft. True would auto-publish (not typical for this job).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions

  publish_to_npm:
    name: Publish to npm
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: build # Ensures build and tests pass before publishing
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to checkout code and read package.json
      id-token: write # Required for OIDC (trusted publishing) with npm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for publishing
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        # Re-install dependencies in the clean publish environment
        run: npm ci

      - name: Build project (if build artifacts are part of the package)
        # Re-run build if necessary to ensure all distributable files are present
        run: |
          if [ -n "$(node -p "require('./package.json').scripts.build")" ]; then
            npm run build
          else
            echo "No build script found in package.json, skipping build step for publish."
          fi

      - name: Verify version consistency
        # Ensures the version in package.json matches the GitHub release tag
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          GIT_TAG_VERSION=${{ github.event.release.tag_name }}
          # GitHub tags might be v1.2.3 or 1.2.3. Strip 'v' for comparison.
          GIT_TAG_VERSION_STRIPPED=$(echo $GIT_TAG_VERSION | sed 's/^v//')

          echo "Package.json version: $PKG_VERSION"
          echo "GitHub release tag: $GIT_TAG_VERSION (stripped: $GIT_TAG_VERSION_STRIPPED)"

          if [ "$PKG_VERSION" != "$GIT_TAG_VERSION_STRIPPED" ]; then
            echo "Error: package.json version ($PKG_VERSION) does not match git tag version ($GIT_TAG_VERSION_STRIPPED)."
            echo "Ensure package.json version is updated and matches the release tag before publishing the release."
            exit 1
          fi

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}