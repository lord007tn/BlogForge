name: Generate Release Notes

on:
  push:
    branches:
      - master

jobs:
  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # If no tags exist, generate changelog from all commits
            conventional-changelog -p angular -r 0 -o RELEASE_NOTES.md
          else
            # Generate changelog from last tag to HEAD
            conventional-changelog -p angular -o RELEASE_NOTES.md
          fi

      - name: Get next version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Simple versioning: increment patch version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create or update release draft
        if: success()
        run: |
          RELEASE_NOTES=$(cat RELEASE_NOTES.md)
          
          # Create release draft
          gh release create "v${{ steps.version.outputs.new_version }}" \
            --title "Release v${{ steps.version.outputs.new_version }}" \
            --notes "$RELEASE_NOTES" \
            --draft \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
